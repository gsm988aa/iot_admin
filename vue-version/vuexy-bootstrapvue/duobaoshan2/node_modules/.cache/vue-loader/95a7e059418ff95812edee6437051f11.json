{"remainingRequest":"C:\\Users\\Han\\Desktop\\iot_admin\\vue-version\\vuexy-bootstrapvue\\duobaoshan2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Han\\Desktop\\iot_admin\\vue-version\\vuexy-bootstrapvue\\duobaoshan2\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Han\\Desktop\\iot_admin\\vue-version\\vuexy-bootstrapvue\\duobaoshan2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Han\\Desktop\\iot_admin\\vue-version\\vuexy-bootstrapvue\\duobaoshan2\\src\\views\\ThreePage.vue?vue&type=template&id=365253fa&","dependencies":[{"path":"C:\\Users\\Han\\Desktop\\iot_admin\\vue-version\\vuexy-bootstrapvue\\duobaoshan2\\src\\views\\ThreePage.vue","mtime":1684119941408},{"path":"C:\\Users\\Han\\Desktop\\iot_admin\\vue-version\\vuexy-bootstrapvue\\duobaoshan2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1691976503719},{"path":"C:\\Users\\Han\\Desktop\\iot_admin\\vue-version\\vuexy-bootstrapvue\\duobaoshan2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1691976506062},{"path":"C:\\Users\\Han\\Desktop\\iot_admin\\vue-version\\vuexy-bootstrapvue\\duobaoshan2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1691976503719},{"path":"C:\\Users\\Han\\Desktop\\iot_admin\\vue-version\\vuexy-bootstrapvue\\duobaoshan2\\node_modules\\vue-loader\\lib\\index.js","mtime":1691976505354}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}