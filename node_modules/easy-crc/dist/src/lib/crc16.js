"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.crc16 = void 0;
const AlgorithmException_1 = require("../classes/AlgorithmException");
const arc_1 = require("../algorithms/crc16/arc");
const aug_ccit_1 = require("../algorithms/crc16/aug-ccit");
const buypass_1 = require("../algorithms/crc16/buypass");
const ccitt_false_1 = require("../algorithms/crc16/ccitt-false");
const cdma2000_1 = require("../algorithms/crc16/cdma2000");
const crc_a_1 = require("../algorithms/crc16/crc-a");
const dds_110_1 = require("../algorithms/crc16/dds-110");
const dect_r_1 = require("../algorithms/crc16/dect-r");
const dect_x_1 = require("../algorithms/crc16/dect-x");
const dnp_1 = require("../algorithms/crc16/dnp");
const en_13757_1 = require("../algorithms/crc16/en-13757");
const genibus_1 = require("../algorithms/crc16/genibus");
const kermit_1 = require("../algorithms/crc16/kermit");
const maxim_1 = require("../algorithms/crc16/maxim");
const mcrf4xx_1 = require("../algorithms/crc16/mcrf4xx");
const modbus_1 = require("../algorithms/crc16/modbus");
const riello_1 = require("../algorithms/crc16/riello");
const t10_dif_1 = require("../algorithms/crc16/t10-dif");
const teledisk_1 = require("../algorithms/crc16/teledisk");
const tms37157_1 = require("../algorithms/crc16/tms37157");
const usb_1 = require("../algorithms/crc16/usb");
const x_25_1 = require("../algorithms/crc16/x-25");
const xmodem_1 = require("../algorithms/crc16/xmodem");
const crc16Algorithms = {
    BUYPASS: buypass_1.buypass,
    'CCITT-FALSE': ccitt_false_1.ccitt_false,
    'AUG-CCITT': aug_ccit_1.aug_ccit,
    ARC: arc_1.arc,
    CDMA2000: cdma2000_1.cdma2000,
    'DDS-110': dds_110_1.dds_110,
    'DECT-R': dect_r_1.dect_r,
    'DECT-X': dect_x_1.dect_x,
    DNP: dnp_1.dnp,
    'EN-13757': en_13757_1.en_13757,
    GENIBUS: genibus_1.genibus,
    MAXIM: maxim_1.maxim,
    KERMIT: kermit_1.kermit,
    MCRF4XX: mcrf4xx_1.mcrf4xx,
    MODBUS: modbus_1.modbus,
    RIELLO: riello_1.riello,
    'T10-DIF': t10_dif_1.t10_dif,
    TELEDISK: teledisk_1.teledisk,
    TMS37157: tms37157_1.tms37157,
    USB: usb_1.usb,
    'X-25': x_25_1.x_25,
    XMODEM: xmodem_1.xmodem,
    'CRC-A': crc_a_1.crc_a
};
/**
 * @param {String} algorithm Name of the algorithm
 * @param {String|Buffer} data A string or an array of bytes
 * @param {Number=} seed A number
 * @returns {Number} CRC16 checksum
 */
function crc16(algorithm, data, seed) {
    const availables = Object.keys(crc16Algorithms);
    if (!availables.includes(algorithm))
        throw new AlgorithmException_1.AlgorithmException(algorithm);
    if (!Buffer.isBuffer(data))
        data = Buffer.from(data);
    const { init, invertedInit, xorOut, refOut, refIn, table } = crc16Algorithms[algorithm];
    let crc = seed ? seed ^ xorOut : (refIn ? invertedInit || 0 : init);
    if (refOut) {
        for (const b of data)
            crc = table[(b ^ crc) & 0xFF] ^ (crc >> 8 & 0xFF);
    }
    else {
        for (const b of data)
            crc = table[((crc >> 8) ^ b) & 0xFF] ^ (crc << 8);
    }
    return (crc ^ xorOut) & 0xFFFF;
}
exports.crc16 = crc16;
