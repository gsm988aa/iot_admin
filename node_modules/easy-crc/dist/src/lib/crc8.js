"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.crc8 = void 0;
const AlgorithmException_1 = require("../classes/AlgorithmException");
const crc_8_1 = require("../algorithms/crc8/crc-8");
const cdma2000_1 = require("../algorithms/crc8/cdma2000");
const darc_1 = require("../algorithms/crc8/darc");
const dvb_s2_1 = require("../algorithms/crc8/dvb-s2");
const ebu_1 = require("../algorithms/crc8/ebu");
const i_code_1 = require("../algorithms/crc8/i-code");
const itu_1 = require("../algorithms/crc8/itu");
const maxim_1 = require("../algorithms/crc8/maxim");
const rohc_1 = require("../algorithms/crc8/rohc");
const wcdma_1 = require("../algorithms/crc8/wcdma");
const crc8Algorithms = {
    'CRC-8': crc_8_1.crc_8,
    CDMA2000: cdma2000_1.cdma2000,
    DARC: darc_1.darc,
    'DVB-S2': dvb_s2_1.dvb_s2,
    EBU: ebu_1.ebu,
    'I-CODE': i_code_1.i_code,
    ITU: itu_1.itu,
    MAXIM: maxim_1.maxim,
    ROHC: rohc_1.rohc,
    WCDMA: wcdma_1.wcdma
};
/**
 * @param {String} algorithm Name of the algorithm
 * @param {String|Buffer} data A string or an array of bytes
 * @param {Number=} seed A number
 * @returns {Number} CRC8 checksum
 */
function crc8(algorithm, data, seed) {
    const availables = Object.keys(crc8Algorithms);
    if (!availables.includes(algorithm))
        throw new AlgorithmException_1.AlgorithmException(algorithm);
    if (!Buffer.isBuffer(data))
        data = Buffer.from(data);
    const { init, xorOut, table } = crc8Algorithms[algorithm];
    let crc = seed ? seed ^ xorOut : init;
    for (const b of data)
        crc = table[crc ^ b];
    return (crc ^ xorOut) & 0xFFFF;
}
exports.crc8 = crc8;
