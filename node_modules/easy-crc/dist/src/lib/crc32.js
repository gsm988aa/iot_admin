"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.crc32 = void 0;
const AlgorithmException_1 = require("../classes/AlgorithmException");
const bzip2_1 = require("../algorithms/crc32/bzip2");
const crc_32_1 = require("../algorithms/crc32/crc-32");
const crc_32c_1 = require("../algorithms/crc32/crc-32c");
const crc_32d_1 = require("../algorithms/crc32/crc-32d");
const crc_32q_1 = require("../algorithms/crc32/crc-32q");
const jamcrc_1 = require("../algorithms/crc32/jamcrc");
const mpeg_2_1 = require("../algorithms/crc32/mpeg-2");
const posix_1 = require("../algorithms/crc32/posix");
const xfer_1 = require("../algorithms/crc32/xfer");
const crc32Algorithms = {
    'CRC-32': crc_32_1.crc_32,
    'CRC-32C': crc_32c_1.crc_32c,
    'CRC-32D': crc_32d_1.crc_32d,
    'CRC-32Q': crc_32q_1.crc_32q,
    BZIP2: bzip2_1.bzip2,
    JAMCRC: jamcrc_1.jamcrc,
    'MPEG-2': mpeg_2_1.mpeg_2,
    POSIX: posix_1.posix,
    XFER: xfer_1.xfer
};
/**
 * @param {String} algorithm Name of the algorithm
 * @param {String|Buffer} data A string or an array of bytes
 * @param {Number=} seed A number
 * @returns {Number} CRC32 checksum
 */
function crc32(algorithm, data, seed) {
    const availables = Object.keys(crc32Algorithms);
    if (!availables.includes(algorithm))
        throw new AlgorithmException_1.AlgorithmException(algorithm);
    if (!Buffer.isBuffer(data))
        data = Buffer.from(data);
    const { init, xorOut, refOut, table } = crc32Algorithms[algorithm];
    let crc = seed ? (seed ^ xorOut) : init;
    if (refOut) {
        for (const b of data)
            crc = table[(b ^ crc) & 0xFF] ^ (crc >> 8 & 0xFFFFFF);
    }
    else {
        for (const b of data)
            crc = table[((crc >> 24) ^ b) & 0xFF] ^ (crc << 8);
    }
    return (crc ^ xorOut) >>> 0;
}
exports.crc32 = crc32;
